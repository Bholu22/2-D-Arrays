You are given a n*m matrix where n are the number of rows and m are the number of columns. You are also given n*m numbers representing the elements of the matrix.
You will be given a ring number 's' representing the ring of the matrix. For details, refer to image.

You will be given a number 'r' representing number of rotations in an anti-clockwise manner of the specified ring. 
You are required to rotate the 's' th ring by 'r' rotations and display the rotated matrix.

Sample Input:
5
7
11 12 13 14 15 16 17
21 22 23 24 25 26 27
31 32 33 34 35 36 37
41 42 43 44 45 46 47
51 52 53 54 55 56 57
2
3

Sample Output:
11 12 13 14 15 16 17
21 25 26 36 46 45 27
31 24 33 34 35 44 37
41 23 22 32 42 43 47
51 52 53 54 55 56 57

Source code:

import java.util.*;
public class Main
{
    public static int[] fill1D_from2D(int[][] ar, int s)
    {
        int rows=ar.length; //5
        int cols=ar[0].length;  //7 
        int rmin=s-1;
        int cmin=s-1;
        int rmax=rows-s;
        int cmax=cols-s;
        
        int length_1Darray=2*Math.abs(cmax-cmin)+2*Math.abs(rmax-rmin);
        //System.out.println(length_1Darray);
        int[] a=new int[length_1Darray];
        int i=0;
        for(int row=rmin;row<=rmax;row++)
        {
            a[i]=ar[row][cmin];
            i++;
        }
        cmin++;
        for(int col=cmin;col<=cmax;col++)
        {
            a[i]=ar[rmax][col];
            i++;
        }
        rmax--;
        for(int row=rmax;row>=rmin;row--)
        {
            a[i]=ar[row][cmax];
            i++;
        }
        cmax--;
        for(int col=cmax;col>=cmin;col--)
        {
            a[i]=ar[rmin][col];
            i++;
        }
       
        return a;
        
    }
    public static void display(int[][] arr){
        for(int i = 0; i < arr.length; i++){
            for(int j = 0; j < arr[0].length; j++){
                System.out.print(arr[i][j] + " ");
            }
            System.out.println();
        }
    }
    public static void rotate(int[] ar, int k)
    {
        k=k%ar.length;
        if(k<0)
        {
            k+=ar.length;
        }
        reverse(ar,0,ar.length-1);
        reverse(ar,0,k-1);
        reverse(ar,k,ar.length-1);
        
    }
    public static void reverse(int[] ar, int left, int right)
    {
        while(left<right)
        {
            int temp=ar[left];
            ar[left]=ar[right];
            ar[right]=temp;
            left++;
            right--;
        }
    }
    
    public static void fill2D_from1D(int[][] ar,int s,int[] a)
    {
        int rows=ar.length; //5
        int cols=ar[0].length;  //7 
        int rmin=s-1;
        int cmin=s-1;
        int rmax=rows-s;
        int cmax=cols-s;
    
        int i=0;
        for(int row=rmin;row<=rmax;row++)
        {
            ar[row][cmin]=a[i];
            i++;
        }
        cmin++;
        for(int col=cmin;col<=cmax;col++)
        {
            ar[rmax][col]=a[i];
            i++;
        }
        rmax--;
        for(int row=rmax;row>=rmin;row--)
        {
            ar[row][cmax]=a[i];
            i++;
        }
        cmax--;
        for(int col=cmax;col>=cmin;col--)
        {
            ar[rmin][col]=a[i];
            i++;
        }
    }
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[][] ar = new int[n][m];
        for (int i = 0; i < n; i++) {                      
            for (int j = 0; j < m; j++) {
                ar[i][j] = sc.nextInt();
            }
        }
        int s=sc.nextInt();
        int r=sc.nextInt();
		 int arr1D[]=fill1D_from2D(ar,s);
		 //System.out.println();
		 rotate(arr1D,r);
		 //System.out.println();
		 fill2D_from1D(ar,s,arr1D);
		 display(ar);
		 
		 
	}
}


